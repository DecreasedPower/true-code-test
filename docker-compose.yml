services:
  # api-gateway:
  #  build:
  #    context: ./Gateway
  #    dockerfile: Dockerfile
  #  container_name: api-gateway
  #  ports:
  #    - "5000:80"
  #  environment:
  #    - ASPNETCORE_ENVIRONMENT=Production
  #  depends_on:
  #    - currency-service
  #    - user-service
  #    - finance-service
  #  networks:
  #    - backend

  currency-service:
   build:
     context: ./CurrencyService
     dockerfile: Dockerfile
   container_name: currency-service
   ports:
     - "5001:80"
   environment:
     - ASPNETCORE_ENVIRONMENT=Development
     - DbConnectionString=Host=postgres;Port=5432;Database=appdb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
   depends_on:
     - postgres
   networks:
     - backend

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=appdb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - JWT__PublicKeyBase64=${PUBLIC_KEY}
      - JWT__PrivateKeyBase64=${PRIVATE_KEY}
    depends_on:
      - postgres
    networks:
      - backend

  finance-service:
    build:
      context: ./FinanceService
      dockerfile: Dockerfile
    container_name: finance-service
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=appdb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - JWT__PublicKeyBase64=${PUBLIC_KEY}
    depends_on:
      - postgres
    networks:
      - backend

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: appdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge